{"/home/travis/build/npmtest/node-npmtest-swagger-parser/test.js":"/* istanbul instrument in package npmtest_swagger_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/lib.npmtest_swagger_parser.js":"/* istanbul instrument in package npmtest_swagger_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_swagger_parser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_swagger_parser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-swagger-parser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_swagger_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_swagger_parser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_swagger_parser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_swagger_parser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_swagger_parser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_swagger_parser.__dirname + '/lib.npmtest_swagger_parser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/node_modules/swagger-parser/lib/index.js":"/** !\n * Swagger Parser v3.4.0\n *\n * @link https://github.com/BigstickCarpet/swagger-parser\n * @license MIT\n */\n'use strict';\n\nvar validateSchema = require('./validate-schema'),\n    validateSpec   = require('./validate-spec'),\n    util           = require('./util'),\n    Options        = require('./options'),\n    Promise        = require('./promise'),\n    maybe          = require('call-me-maybe'),\n    ono            = require('ono'),\n    $RefParser     = require('json-schema-ref-parser'),\n    dereference    = require('json-schema-ref-parser/lib/dereference');\n\nmodule.exports = SwaggerParser;\n\n/**\n * This class parses a Swagger 2.0 API, resolves its JSON references and their resolved values,\n * and provides methods for traversing, dereferencing, and validating the API.\n *\n * @constructor\n * @extends $RefParser\n */\nfunction SwaggerParser() {\n  $RefParser.apply(this, arguments);\n}\n\nutil.inherits(SwaggerParser, $RefParser);\nSwaggerParser.YAML = $RefParser.YAML;\nSwaggerParser.parse = $RefParser.parse;\nSwaggerParser.resolve = $RefParser.resolve;\nSwaggerParser.bundle = $RefParser.bundle;\nSwaggerParser.dereference = $RefParser.dereference;\n\n/**\n * Alias {@link $RefParser#schema} as {@link SwaggerParser#api}\n */\nObject.defineProperty(SwaggerParser.prototype, 'api', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.schema;\n  }\n});\n\n/**\n * Parses the given Swagger API.\n * This method does not resolve any JSON references.\n * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.\n *\n * @param {string|object} api - The file path or URL of the Swagger API. Or a Swagger object.\n * @param {ParserOptions} [options] - Options that determine how the API is parsed\n * @param {function} [callback] - An error-first callback. The second parameter is the parsed API object.\n * @returns {Promise} - The returned promise resolves with the parsed API object.\n */\nSwaggerParser.prototype.parse = function(api, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  options = new Options(options);\n  var apiParam = api;\n\n  return $RefParser.prototype.parse.call(this, api, options)\n    .then(function(schema) {\n      var supportedSwaggerVersions = ['2.0'];\n\n      // Verify that the parsed object is a Swagger API\n      if (schema.swagger === undefined || schema.info === undefined || schema.paths === undefined) {\n        throw ono.syntax('%s is not a valid Swagger API definition', apiParam);\n      }\n      else if (typeof schema.swagger === 'number') {\n        // This is a very common mistake, so give a helpful error message\n        throw ono.syntax('Swagger version number must be a string (e.g. \"2.0\") not a number.');\n      }\n      else if (typeof schema.info.version === 'number') {\n        // This is a very common mistake, so give a helpful error message\n        throw ono.syntax('API version number must be a string (e.g. \"1.0.0\") not a number.');\n      }\n      else if (supportedSwaggerVersions.indexOf(schema.swagger) === -1) {\n        throw ono.syntax(\n          'Unsupported Swagger version: %d. Swagger Parser only supports version %s',\n          schema.swagger, supportedSwaggerVersions.join(', '));\n      }\n\n      // Looks good!\n      return maybe(callback, Promise.resolve(schema));\n    })\n    .catch(function(err) {\n      return maybe(callback, Promise.reject(err));\n    });\n};\n\n/**\n * Parses, dereferences, and validates the given Swagger API.\n * Depending on the options, validation can include JSON Schema validation and/or Swagger Spec validation.\n *\n * @param {string|object} api - The file path or URL of the Swagger API. Or a Swagger object.\n * @param {ParserOptions} [options] - Options that determine how the API is parsed, dereferenced, and validated\n * @param {function} [callback] - An error-first callback. The second parameter is the parsed API object.\n * @returns {Promise} - The returned promise resolves with the parsed API object.\n */\nSwaggerParser.validate = function(api, options, callback) {\n  var Class = this; // eslint-disable-line consistent-this\n  return new Class().validate(api, options, callback);\n};\n\n/**\n * Parses, dereferences, and validates the given Swagger API.\n * Depending on the options, validation can include JSON Schema validation and/or Swagger Spec validation.\n *\n * @param {string|object} api - The file path or URL of the Swagger API. Or a Swagger object.\n * @param {ParserOptions} [options] - Options that determine how the API is parsed, dereferenced, and validated\n * @param {function} [callback] - An error-first callback. The second parameter is the parsed API object.\n * @returns {Promise} - The returned promise resolves with the parsed API object.\n */\nSwaggerParser.prototype.validate = function(api, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  options = new Options(options);\n  var me = this;\n\n  // ZSchema doesn't support circular objects, so don't dereference circular $refs yet\n  // (see https://github.com/zaggino/z-schema/issues/137)\n  var circular$RefOption = options.$refs.circular;\n  options.validate.schema && (options.$refs.circular = 'ignore');\n\n  return this.dereference(api, options)\n    .then(function() {\n      // Restore the original options, now that we're done dereferencing\n      options.$refs.circular = circular$RefOption;\n\n      if (options.validate.schema) {\n        // Validate the API against the Swagger schema\n        // NOTE: This is safe to do, because we haven't dereferenced circular $refs yet\n        validateSchema(me.api);\n\n        if (me.$refs.circular) {\n          if (circular$RefOption === true) {\n            // The API has circular references,\n            // so we need to do a second-pass to fully-dereference it\n            dereference(me, options);\n          }\n          else if (circular$RefOption === false) {\n            // The API has circular references, and they're not allowed, so throw an error\n            throw ono.reference('The API contains circular references');\n          }\n        }\n      }\n\n      if (options.validate.spec) {\n        // Validate the API against the Swagger spec\n        validateSpec(me.api);\n      }\n\n      return maybe(callback, Promise.resolve(me.schema));\n    })\n    .catch(function(err) {\n      return maybe(callback, Promise.reject(err));\n    });\n};\n\n/**\n * The Swagger object\n * https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#swagger-object\n *\n * @typedef {{swagger: string, info: {}, paths: {}}} SwaggerObject\n */\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/node_modules/swagger-parser/lib/validate-schema.js":"'use strict';\n\nvar util          = require('./util'),\n    ono           = require('ono'),\n    ZSchema       = require('z-schema'),\n    swaggerSchema = require('swagger-schema-official/schema');\n\nmodule.exports = validateSchema;\n\ninitializeZSchema();\n\n/**\n * Validates the given Swagger API against the Swagger 2.0 schema.\n *\n * @param {SwaggerObject} api\n */\nfunction validateSchema(api) {\n  util.debug('Validating against the Swagger 2.0 schema');\n\n  // Validate the API against the Swagger schema\n  var isValid = ZSchema.validate(api, swaggerSchema);\n\n  if (isValid) {\n    util.debug('    Validated successfully');\n  }\n  else {\n    var err = ZSchema.getLastError();\n    var message = 'Swagger schema validation failed. \\n' + formatZSchemaError(err.details);\n    throw ono.syntax(err, {details: err.details}, message);\n  }\n}\n\n/**\n * Performs one-time initialization logic to prepare for Swagger Schema validation.\n */\nfunction initializeZSchema() {\n  ZSchema = new ZSchema({\n    breakOnFirstError: true,\n    noExtraKeywords: true,\n    ignoreUnknownFormats: false,\n    reportPathAsArray: true\n  });\n}\n\n/**\n * Z-Schema validation errors are a nested tree structure.\n * This function crawls that tree and builds an error message string.\n *\n * @param {object[]}  errors     - The Z-Schema error details\n * @param {string}    [indent]   - The whitespace used to indent the error message\n * @returns {string}\n */\nfunction formatZSchemaError(errors, indent) {\n  indent = indent || '  ';\n  var message = '';\n  errors.forEach(function(error, index) {\n    message += util.format('%s%s at #/%s\\n', indent, error.message, error.path.join('/'));\n    if (error.inner) {\n      message += formatZSchemaError(error.inner, indent + '  ');\n    }\n  });\n  return message;\n}\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/node_modules/swagger-parser/lib/util.js":"'use strict';\n\nvar debug = require('debug'),\n    util  = require('util');\n\nexports.format = util.format;\nexports.inherits = util.inherits;\n\n/**\n * Writes messages to stdout.\n * Log messages are suppressed by default, but can be enabled by setting the DEBUG variable.\n * @type {function}\n */\nexports.debug = debug('swagger:parser');\n\n/**\n * Regular Expression that matches Swagger path params.\n */\nexports.swaggerParamRegExp = /\\{([^/}]+)}/g;\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/node_modules/swagger-parser/lib/validate-spec.js":"'use strict';\n\nvar util           = require('./util'),\n    ono            = require('ono'),\n    swaggerMethods = require('swagger-methods'),\n    primitiveTypes = ['array', 'boolean', 'integer', 'number', 'string'],\n    schemaTypes    = ['array', 'boolean', 'integer', 'number', 'string', 'object', 'null', undefined];\n\nmodule.exports = validateSpec;\n\n/**\n * Validates parts of the Swagger 2.0 spec that aren't covered by the Swagger 2.0 JSON Schema.\n *\n * @param {SwaggerObject} api\n */\nfunction validateSpec(api) {\n  util.debug('Validating against the Swagger 2.0 spec');\n\n  var paths = Object.keys(api.paths || {});\n  paths.forEach(function(pathName) {\n    var path = api.paths[pathName];\n    var pathId = '/paths' + pathName;\n\n    if (path && pathName.indexOf('/') === 0) {\n      validatePath(api, path, pathId);\n    }\n  });\n\n  util.debug('    Validated successfully');\n}\n\n/**\n * Validates the given path.\n *\n * @param {SwaggerObject} api      - The entire Swagger API object\n * @param {object}        path     - A Path object, from the Swagger API\n * @param {string}        pathId   - A value that uniquely identifies the path\n */\nfunction validatePath(api, path, pathId) {\n  swaggerMethods.forEach(function(operationName) {\n    var operation = path[operationName];\n    var operationId = pathId + '/' + operationName;\n\n    if (operation) {\n      validateParameters(api, path, pathId, operation, operationId);\n\n      var responses = Object.keys(operation.responses || {});\n      responses.forEach(function(responseName) {\n        var response = operation.responses[responseName];\n        var responseId = operationId + '/responses/' + responseName;\n        validateResponse(responseName, response, responseId);\n      });\n    }\n  });\n}\n\n/**\n * Validates the parameters for the given operation.\n *\n * @param {SwaggerObject} api           - The entire Swagger API object\n * @param {object}        path          - A Path object, from the Swagger API\n * @param {string}        pathId        - A value that uniquely identifies the path\n * @param {object}        operation     - An Operation object, from the Swagger API\n * @param {string}        operationId   - A value that uniquely identifies the operation\n */\nfunction validateParameters(api, path, pathId, operation, operationId) {\n  var pathParams = path.parameters || [];\n  var operationParams = operation.parameters || [];\n\n  // Check for duplicate path parameters\n  try {\n    checkForDuplicates(pathParams);\n  }\n  catch (e) {\n    throw ono.syntax(e, 'Validation failed. %s has duplicate parameters', pathId);\n  }\n\n  // Check for duplicate operation parameters\n  try {\n    checkForDuplicates(operationParams);\n  }\n  catch (e) {\n    throw ono.syntax(e, 'Validation failed. %s has duplicate parameters', operationId);\n  }\n\n  // Combine the path and operation parameters,\n  // with the operation params taking precedence over the path params\n  var params = pathParams.reduce(function(combinedParams, value) {\n    var duplicate = combinedParams.some(function(param) {\n      return param.in === value.in && param.name === value.name;\n    });\n    if (!duplicate) {\n      combinedParams.push(value);\n    }\n    return combinedParams;\n  }, operationParams.slice());\n\n  validateBodyParameters(params, operationId);\n  validatePathParameters(params, pathId, operationId);\n  validateParameterTypes(params, api, operation, operationId);\n}\n\n/**\n * Validates body and formData parameters for the given operation.\n *\n * @param   {object[]}  params       -  An array of Parameter objects\n * @param   {string}    operationId  -  A value that uniquely identifies the operation\n */\nfunction validateBodyParameters(params, operationId) {\n  var bodyParams = params.filter(function(param) { return param.in === 'body'; });\n  var formParams = params.filter(function(param) { return param.in === 'formData'; });\n\n  // There can only be one \"body\" parameter\n  if (bodyParams.length > 1) {\n    throw ono.syntax(\n      'Validation failed. %s has %d body parameters. Only one is allowed.',\n      operationId, bodyParams.length\n    );\n  }\n  else if (bodyParams.length > 0 && formParams.length > 0) {\n    // \"body\" params and \"formData\" params are mutually exclusive\n    throw ono.syntax(\n      'Validation failed. %s has body parameters and formData parameters. Only one or the other is allowed.',\n      operationId\n    );\n  }\n}\n\n/**\n * Validates path parameters for the given path.\n *\n * @param   {object[]}  params        - An array of Parameter objects\n * @param   {string}    pathId        - A value that uniquely identifies the path\n * @param   {string}    operationId   - A value that uniquely identifies the operation\n */\nfunction validatePathParameters(params, pathId, operationId) {\n  // Find all {placeholders} in the path string\n  var placeholders = pathId.match(util.swaggerParamRegExp) || [];\n\n  // Check for duplicates\n  for (var i = 0; i < placeholders.length; i++) {\n    for (var j = i + 1; j < placeholders.length; j++) {\n      if (placeholders[i] === placeholders[j]) {\n        throw ono.syntax(\n          'Validation failed. %s has multiple path placeholders named %s', operationId, placeholders[i]);\n      }\n    }\n  }\n\n  params\n    .filter(function(param) { return param.in === 'path'; })\n    .forEach(function(param) {\n      if (param.required !== true) {\n        throw ono.syntax(\n          'Validation failed. Path parameters cannot be optional. Set required=true for the \"%s\" parameter at %s',\n          param.name,\n          operationId\n        );\n      }\n      var match = placeholders.indexOf('{' + param.name + '}');\n      if (match === -1) {\n        throw ono.syntax(\n          'Validation failed. %s has a path parameter named \"%s\", ' +\n          'but there is no corresponding {%s} in the path string',\n          operationId,\n          param.name,\n          param.name\n        );\n      }\n      placeholders.splice(match, 1);\n    });\n\n  if (placeholders.length > 0) {\n    throw ono.syntax('Validation failed. %s is missing path parameter(s) for %s', operationId, placeholders);\n  }\n}\n\n/**\n * Validates data types of parameters for the given operation.\n *\n * @param   {object[]}  params       -  An array of Parameter objects\n * @param   {object}    api          -  The entire Swagger API object\n * @param   {object}    operation    -  An Operation object, from the Swagger API\n * @param   {string}    operationId  -  A value that uniquely identifies the operation\n */\nfunction validateParameterTypes(params, api, operation, operationId) {\n  params.forEach(function(param) {\n    var parameterId = operationId + '/parameters/' + param.name;\n    var schema, validTypes;\n\n    switch (param.in) {\n      case 'body':\n        schema = param.schema;\n        validTypes = schemaTypes;\n        break;\n      case 'formData':\n        schema = param;\n        validTypes = primitiveTypes.concat('file');\n        break;\n      default:\n        schema = param;\n        validTypes = primitiveTypes;\n    }\n\n    validateSchema(schema, parameterId, validTypes);\n\n    if (schema.type === 'file') {\n      // \"file\" params require specific \"consumes\" types\n      var consumes = operation.consumes || api.consumes || [];\n      if (consumes.indexOf('multipart/form-data') === -1 &&\n        consumes.indexOf('application/x-www-form-urlencoded') === -1) {\n        throw ono.syntax(\n          'Validation failed. %s has a file parameter, so it must consume multipart/form-data ' +\n          'or application/x-www-form-urlencoded',\n          operationId\n        );\n      }\n    }\n  });\n}\n\n/**\n * Checks the given parameter list for duplicates, and throws an error if found.\n *\n * @param   {object[]}  params  - An array of Parameter objects\n */\nfunction checkForDuplicates(params) {\n  for (var i = 0; i < params.length - 1; i++) {\n    var outer = params[i];\n    for (var j = i + 1; j < params.length; j++) {\n      var inner = params[j];\n      if (outer.name === inner.name && outer.in === inner.in) {\n        throw ono.syntax('Validation failed. Found multiple %s parameters named \"%s\"', outer.in, outer.name);\n      }\n    }\n  }\n}\n\n/**\n * Validates the given response object.\n *\n * @param   {string}    code        -  The HTTP response code (or \"default\")\n * @param   {object}    response    -  A Response object, from the Swagger API\n * @param   {string}    responseId  -  A value that uniquely identifies the response\n */\nfunction validateResponse(code, response, responseId) {\n  if (code !== 'default' && (code < 100 || code > 599)) {\n    throw ono.syntax('Validation failed. %s has an invalid response code (%s)', responseId, code);\n  }\n\n  var headers = Object.keys(response.headers || {});\n  headers.forEach(function(headerName) {\n    var header = response.headers[headerName];\n    var headerId = responseId + '/headers/' + headerName;\n    validateSchema(header, headerId, primitiveTypes);\n  });\n\n  if (response.schema) {\n    var validTypes = schemaTypes.concat('file');\n    if (validTypes.indexOf(response.schema.type) === -1) {\n      throw ono.syntax(\n        'Validation failed. %s has an invalid response schema type (%s)', responseId, response.schema.type);\n    }\n  }\n}\n\n/**\n * Validates the given Swagger schema object.\n *\n * @param {object}    schema      - A Schema object, from the Swagger API\n * @param {string}    schemaId    - A value that uniquely identifies the schema object\n * @param {string[]}  validTypes  - An array of the allowed schema types\n */\nfunction validateSchema(schema, schemaId, validTypes) {\n  if (validTypes.indexOf(schema.type) === -1) {\n    throw ono.syntax(\n      'Validation failed. %s has an invalid type (%s)', schemaId, schema.type);\n  }\n\n  if (schema.type === 'array' && !schema.items) {\n    throw ono.syntax('Validation failed. %s is an array, so it must include an \"items\" schema', schemaId);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/node_modules/swagger-parser/lib/options.js":"'use strict';\n\nvar $RefParserOptions = require('json-schema-ref-parser/lib/options'),\n    util              = require('util');\n\nmodule.exports = ParserOptions;\n\n/**\n * Options that determine how Swagger APIs are parsed, dereferenced, cached, and validated.\n *\n * @param {object|ParserOptions} [options] - Overridden options\n * @constructor\n * @extends $RefParserOptions\n */\nfunction ParserOptions(options) {\n  this.validate = {\n    schema: true,\n    spec: true\n  };\n\n  $RefParserOptions.apply(this, arguments);\n}\n\nutil.inherits(ParserOptions, $RefParserOptions);\n","/home/travis/build/npmtest/node-npmtest-swagger-parser/node_modules/swagger-parser/lib/promise.js":"'use strict';\n\n/** @type {Promise} **/\nmodule.exports = typeof Promise === 'function' ? Promise : require('es6-promise').Promise;\n"}